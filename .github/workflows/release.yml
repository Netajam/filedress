# .github/workflows/release.yml

name: Rust Release CI

on:
  push:
    branches:
      - 'main' # Run on pushes to main to update the cache
    tags:
      - 'v*'  # Run on tags to create a release
  pull_request:
    branches:
      - 'main' # Run on PRs to test them

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build for ${{ matrix.os_name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
            target: x86_64-unknown-linux-gnu
            asset_name: filedress-linux-x86_64
          - os: windows-latest
            os_name: Windows
            target: x86_64-pc-windows-msvc
            asset_name: filedress-windows-x86_64
          - os: macos-latest
            os_name: macOS
            target: x86_64-apple-darwin
            asset_name: filedress-macos-x86_64

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # --- THE NEW, CORRECT CACHING STRATEGY ---
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          # Use a single, shared key for the 'main' branch cache.
          # All jobs will restore from this, but only pushes to 'main' will save to it.
          shared-key: ${{ runner.os }}-${{ matrix.target }}
          # Only save the cache if we are on the 'main' branch and the event was a 'push'.
          save-if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
      # ----------------------------------------

      - name: Add target for cross-compilation
        run: rustup target add ${{ matrix.target }}
        
      # For tagged releases, we still force a clean build of the final binary,
      # even though we are using the cached dependencies.
      - name: Clean final binary (for release builds)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        run: |
          # This removes just the final executable, forcing it to be re-linked
          # with the correct version string, while keeping the fast dependency builds.
          rm -f target/${{ matrix.target }}/release/filedress
          rm -f target/${{ matrix.target }}/release/filedress.exe

      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}
      
      # ... (rest of the build job is unchanged) ...
      - name: Create packaging directory
        run: mkdir -p staging
      - name: Stage assets (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/filedress staging/
          cp README.md staging/
          cp LICENSE staging/
      - name: Stage assets (Windows)
        if: runner.os == 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/filedress.exe staging/
          cp README.md staging/
          cp LICENSE staging/
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: staging/
          if-no-files-found: error

  create_release:
    # ... (create_release job is unchanged) ...
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Package downloaded artifacts
        run: |
          for dir in artifacts/*; do
            artifact_name=$(basename "$dir")
            if [[ "$artifact_name" == *"windows"* ]];
              then (cd "$dir" && zip -r "../${artifact_name}.zip" .);
              else (cd "$dir" && tar -czf "../${artifact_name}.tar.gz" *);
            fi
          done
      
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz