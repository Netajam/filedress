# .github/workflows/release.yml

name: Rust Release CI

# This workflow now runs on two events:
# 1. When a new tag starting with 'v' is pushed.
# 2. When a pull request is opened or updated that targets the 'main' branch.
on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

defaults:
  run:
    shell: bash

jobs:
  # Job to build the application for different platforms
  build:
    name: Build for ${{ matrix.os_name }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            os_name: Linux
            target: x86_64-unknown-linux-gnu
            asset_name: filedress-linux-x86_64
          - os: windows-latest
            os_name: Windows
            target: x86_64-pc-windows-msvc
            asset_name: filedress-windows-x86_64
          - os: macos-latest
            os_name: macOS
            target: x86_64-apple-darwin
            asset_name: filedress-macos-x86_64

    steps:
      # 1. Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up Rust and cache dependencies
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      # 3. Build the application in release mode
      - name: Build binary
        run: cargo build --release --locked --target ${{ matrix.target }}

      # 4. Create a temporary directory for packaging
      - name: Create packaging directory
        run: mkdir -p staging

      # 5. Move assets into the staging directory
      - name: Stage assets (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/filedress staging/
          cp README.md staging/
          cp LICENSE staging/

      - name: Stage assets (Windows)
        if: runner.os == 'Windows'
        run: |
          cp target/${{ matrix.target }}/release/filedress.exe staging/
          cp README.md staging/
          cp LICENSE staging/

      # 6. Upload the staging directory as an artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: staging/
          if-no-files-found: error


  # Job to create the GitHub Release and attach the built artifacts
  create_release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    # --- IMPORTANT CONDITION ---
    # This job will ONLY run if the event was a push of a tag starting with 'v'.
    # It will be skipped for all pull request builds.
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')

    steps:
      # 1. Download all the artifacts from the build jobs
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      # 2. Package the downloaded artifacts into final archives
      - name: Package downloaded artifacts
        run: |
          for dir in artifacts/*; do
            artifact_name=$(basename "$dir")
            if [[ "$artifact_name" == *"windows"* ]]; then
              (cd "$dir" && zip -r "../${artifact_name}.zip" .)
            else
              (cd "$dir" && tar -czf "../${artifact_name}.tar.gz" .)
            fi
          done
      
      # 3. Create the Release and Upload the final archives
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }}
          generate_release_notes: true
          files: |
            artifacts/*.zip
            artifacts/*.tar.gz